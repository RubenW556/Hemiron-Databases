volumes:
  postgres:

networks:
  databases-db-dev:
    name: databases-db-dev
    external: true
  hemiron-ntw-compose:
    external: true
    name: hemiron-ntw-compose

services: # docker compose up --build
  db: # docker compose up --build db
    container_name: db
    restart: unless-stopped
    env_file:
      - .env.dev
        #command below adds pg_stat_statements to the extensions of postgres
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=200
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./init-a-user-db.sh:/docker-entrypoint-initdb.d/init-a-user-db.sh
      - ./init-z-schema-tables.sh:/docker-entrypoint-initdb.d/init-z-schema-tables.sh
    networks:
      - databases-db-dev
      - hemiron-ntw-compose
    labels:
      - "traefik.docker.network=hemiron-ntw-compose"
      # routers
      - "traefik.tcp.routers.postgres.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.postgres.entryPoints=postgres"
      - "traefik.tcp.routers.postgres.service=postgres"
      # services (needed for TCP)
      - "traefik.tcp.services.postgres.loadbalancer.server.port=5432"
  adminer:
    environment:
      - ADMINER_DEFAULT_SERVER=db
    networks:
      - databases-db-dev
      - hemiron-ntw-compose
    labels:
      - "traefik.docker.network=hemiron-ntw-compose"
      # For Url adminer.${PRIMARY_DOMAIN}
      - "traefik.http.routers.adminer.rule=Host(`adminer.${PRIMARY_DOMAIN?Variable not set!}`)"
      - "traefik.http.routers.adminer.entrypoints=web"
      - "traefik.http.routers.adminer.tls=false"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
