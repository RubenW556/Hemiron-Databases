stages:
    - build
    - test
    - deploy

.job_docker_template: &template
    retry: 2
    tags:
        - swarm
    only:
        refs:
            - main
        changes:
            - frontend/**/*

CI_BUILD_FRONTEND:
    stage: build
    variables:
        BASE_IMAGE: nginx1.23.1-alpine
        PROJECT_ID: frontend
        IMAGE_NAME_FINAL: $IMAGE_NAME_BASE/$PROJECT_ID:1.0.$CI_PIPELINE_IID-$BASE_IMAGE
    inherit:
        default: false
    <<: *template
    needs: [CI_PRE_CHECK] # no dependencies.
#    when: manual # only execute when approved manually
    before_script:
        - echo "building for production"
        - docker login -u pipeline -p $BUILD_TOKEN $CI_REGISTRY
    script:
        - docker build -t $IMAGE_NAME_FINAL --target production $PROJECT_ID/.
    after_script:
        - docker image push $IMAGE_NAME_FINAL # push with versioning
        - docker image tag $IMAGE_NAME_FINAL $IMAGE_NAME_BASE/$PROJECT_ID:production # retag same image and push with production tag
        - docker image push $IMAGE_NAME_BASE/$PROJECT_ID:production
        - docker images ls
    artifacts: # create artifact when job fails
        name: $IMAGE_NAME_FINAL
        when: on_failure
        paths:
            - ./
        expire_in: 2 days
        exclude:
            - .gitlab-ci.yml

CI_DEPLOY_FRONTEND: #$BUILD_TOKEN  $CI_REGISTRY  $SSH_DEPLOYMENT_IP   $SSH_DEPLOYMENT_HOST $SSH_DEPLOYMENT_USER $SSH_PRIVATE_KEY
    stage: deploy
    variables:
        STACK_FILE_NAME: frontend-stack.yml
        DEPLOY_FILE_NAME: deploy-frontend.sh
        PROJECT_ID: frontend
    <<: *template
    when: manual # only execute when approved manually
    needs: [CI_BUILD_FRONTEND]
    before_script:
        - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - echo $SSH_DEPLOYMENT_IP $SSH_DEPLOYMENT_HOST >> /etc/hosts
        - echo $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST
        - docker login -u pipeline -p $BUILD_TOKEN $CI_REGISTRY
        # - ssh -o StrictHostKeyChecking=no -t $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST 'bash -s' < prepare.sh #create project dir
        - ssh -o StrictHostKeyChecking=no $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST bash -c 'ls -l'
        - ssh -o StrictHostKeyChecking=no $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST bash -c 'docker network ls'
    script:
        - scp -o StrictHostKeyChecking=no ./$PROJECT_ID/$STACK_FILE_NAME $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST:/home/student/databases/$STACK_FILE_NAME
        - ssh -o StrictHostKeyChecking=no -t $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST 'bash -s' < ./$PROJECT_ID/$DEPLOY_FILE_NAME
    after_script:
        - ssh -o StrictHostKeyChecking=no $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST bash -c 'docker stack ls'

CI_VERIFY_FRONTEND:
  stage: verify
  <<: *template
  needs: [CI_DEPLOY_FRONTEND]
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo $SSH_DEPLOYMENT_IP $SSH_DEPLOYMENT_HOST >> /etc/hosts
    - echo $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST
    - docker login -u pipeline -p $BUILD_TOKEN $CI_REGISTRY
  script:
    - ssh -o StrictHostKeyChecking=no $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST bash -c 'ls -l'
    - ssh -o StrictHostKeyChecking=no $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST bash -c 'docker stack ls'


