#trigger_job:
#  trigger:
#    include: child-pipeline.yml

include:
  - local: "child-pipeline.yml"
  - local: "backend/child-pipeline-backend.yml"
  - local: "frontend/child-pipeline-frontend.yml"

default:
  timeout: 2 hours # terminate any job taking longer than 1 hour

stages:
  - pre-check
  - set-up
  - analysis
  - build
  - test
  - deploy
  - verify

image: docker:latest

.job_docker_template: &template
  retry: 2
  tags:
    - swarm
  only:
    refs:
      - sonarqube_based_on_tutorial1
      - main


CI_PRE_CHECK:
  stage: pre-check
  <<: *template
  allow_failure: true #On failure All jobs after this one, will not halt.
  script:
    - echo "pre checking"
    - ls -l
    - docker version
#    - userdump #test failure. All jobs after this one, not ran (with allow_failure false).

CI_SET_UP:
  stage: set-up
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - ./sonar.sh stop && rm -rf $SONARQUBE_HOME/data/cache/* && ./sonar.sh start #clearing cache
    - sonar-scanner -X
  allow_failure: true
  only:
    - sonarqube_based_on_tutorial2
    - develop


#    - userdump #test failure. All jobs after this one, not ran (with allow_failure false).

#CI_BUILD:
#  stage: build
#  variables:
#    BASE_IMAGE: ubuntu
#    PROJECT_ID: test
#    IMAGE_NAME_FINAL: $IMAGE_NAME_BASE/$PROJECT_ID:1.0.$CI_PIPELINE_IID-$BASE_IMAGE
##  rules:
##    - if: $CI_COMMIT_BRANCH == "feature/pipeline-api"
##      changes:
##        - Dockerfile
#  retry: 2
#  inherit:
#    default: false
#  <<: *template
#  needs: [] # no dependencies
#  before_script:
#    - echo "building"
#    - docker login -u pipeline -p $BUILD_TOKEN $CI_REGISTRY
#    - sleep 10
#  script:
#    - docker build -t $IMAGE_NAME_FINAL .
#  after_script:
#    - docker image push $IMAGE_NAME_FINAL
#    - docker images ls
##  cache:
##    key: $IMAGE_NAME_FINAL
##    paths:
##      - ./
#  artifacts: # create artifact when job fails
#    name: $IMAGE_NAME_FINAL
#    when: on_failure
#    paths:
#      - ./
#    expire_in: 2 days
#    exclude:
#      - .gitlab-ci.yml

#CI_BUILD_V2:
#  stage: build
#  variables:
#    BASE_IMAGE: ubuntu
#    PROJECT_ID: testv2
#    IMAGE_NAME_FINAL: $IMAGE_NAME_BASE/$PROJECT_ID:1.0.$CI_PIPELINE_IID-$BASE_IMAGE
#  <<: *template
#  needs: [CI_PRE_CHECK] # dependent on CI_PRE_CHECK. only runs after it
#  before_script:
#    - echo "building"
#    - docker login -u pipeline -p $BUILD_TOKEN $CI_REGISTRY
#    - sleep 10
#  script:
#    - docker build -t $IMAGE_NAME_FINAL .
#  after_script:
#    - docker image push $IMAGE_NAME_FINAL
#    - docker images ls

CI_TEST:
  stage: test
  <<: *template
  when: manual # only execute when approved manually
  script:
    - echo "Testing"
    - docker container ls
    - docker image ls

#CI_Deploy_Testing:
#  stage: deploy
#  <<: *template
#  script:
#    - sudo docker run -itd -p 80:80 httpd
#  environment:
#    name: Testing
