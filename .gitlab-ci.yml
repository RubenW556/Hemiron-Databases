image: nielsprins/ipsenh-ci

.pull_backend_npm_cache:
  before_script:
    - (cd ./backend && npm ci --cache .npm --prefer-offline)
  cache:
    untracked: true
    policy: pull
    key:
      files:
        - backend/package-lock.json
    paths:
      - backend/.npm/

.pull_frontend_npm_cache:
  before_script:
    - (cd ./frontend && npm ci --cache .npm --prefer-offline)
  cache:
    untracked: true
    policy: pull
    key:
      files:
        - frontend/package-lock.json
    paths:
      - frontend/.npm/

stages:
  - setup
  - test
  - build
  - deploy

backend_npm_install:
  stage: setup
  cache:
    key:
      files:
        - backend/package-lock.json
    paths:
      - backend/.npm/
  script:
    - (cd ./backend && npm ci --include=dev --cache .npm)

frontend_npm_install:
  stage: setup
  cache:
    key:
      files:
        - frontend/package-lock.json
    paths:
      - frontend/.npm/
  script:
    - (cd ./frontend && npm ci --include=dev --cache .npm)

backend_audit:
  stage: test
  allow_failure: true
  needs:
    - backend_npm_install
  extends: .pull_backend_npm_cache
  script:
    - (cd ./backend && npm audit)

frontend_audit:
  stage: test
  allow_failure: true
  needs:
    - frontend_npm_install
  extends: .pull_frontend_npm_cache
  script:
    - (cd ./frontend && npm audit)

backend_lint:
  stage: test
  needs:
    - backend_npm_install
  extends: .pull_backend_npm_cache
  script:
    - (cd ./backend && npm run lint)

frontend_lint:
  stage: test
  needs:
    - frontend_npm_install
  extends: .pull_frontend_npm_cache
  script:
    - (cd ./frontend && npm run lint)

backend_test:
  stage: test
  needs:
    - backend_npm_install
  extends: .pull_backend_npm_cache
  script:
    - (cd ./backend && npm run test)

frontend_test:
  stage: test
  needs:
    - frontend_npm_install
  extends: .pull_frontend_npm_cache
  script:
    - (cd ./frontend && npm run test)

backend_build:
  stage: build
  needs:
    - backend_lint
    - backend_test
  script:
    - (cd ./backend && docker build -t registry.inf-hsleiden.nl/2223.ipsenh-p1-p2/databases/backend .)
  except:
    - main

frontend_build:
  stage: build
  needs:
    - frontend_lint
    - frontend_test
  script:
    - (cd ./frontend && docker build -t registry.inf-hsleiden.nl/2223.ipsenh-p1-p2/databases/frontend .)
  except:
    - main

backend_publish:
  stage: build
  needs:
    - backend_build
  script:
    - (cd ./backend && docker build -t registry.inf-hsleiden.nl/2223.ipsenh-p1-p2/databases/backend .)
    - docker login -u pipeline -p $DOCKER_PASSWORD registry.inf-hsleiden.nl
    - docker push registry.inf-hsleiden.nl/2223.ipsenh-p1-p2/databases/backend
  only:
    - main

frontend_publish:
  stage: build
  needs:
    - frontend_build
  script:
    - (cd ./frontend && docker build -t registry.inf-hsleiden.nl/2223.ipsenh-p1-p2/databases/frontend .)
    - docker login -u pipeline -p $DOCKER_PASSWORD registry.inf-hsleiden.nl
    - docker push registry.inf-hsleiden.nl/2223.ipsenh-p1-p2/databases/frontend
  only:
    - main

deploy_to_swarm:
  stage: deploy
  needs:
    - backend_publish
    - frontend_publish
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "192.168.195.168 manager-2.inf-hsleiden" > /etc/hosts
  script:
    - docker login -u pipeline -p $DOCKER_PASSWORD registry.inf-hsleiden.nl
    - scp -o StrictHostKeyChecking=no docker-stack.yml student@manager-2.inf-hsleiden:/home/student/serverless/docker-stack.yml
    - ssh -o StrictHostKeyChecking=no -t student@manager-2.inf-hsleiden 'bash -s' < deploy.sh
  only:
    - main
