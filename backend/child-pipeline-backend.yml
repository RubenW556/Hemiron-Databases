stages:
    - build
    - test
    - deploy

.job_docker_template: &template
    tags:
        - swarm
    only:
        refs:
            - feature/pipeline-api
        changes:
            - backend/**/*

CI_BUILD_BACKEND:
    stage: build
    variables:
        BASE_IMAGE: node18-alpine
        PROJECT_ID: backend
        IMAGE_NAME_FINAL: $IMAGE_NAME_BASE/$PROJECT_ID:1.0.$CI_PIPELINE_IID-$BASE_IMAGE
    retry: 2
    inherit:
        default: false
    <<: *template
    needs: [] # no dependencies.
    when: manual # only execute when approved manually
    before_script:
        - echo "building for production"
        - docker login -u pipeline -p $BUILD_TOKEN $CI_REGISTRY
    script:
        - docker build -t $IMAGE_NAME_FINAL --target production $PROJECT_ID/.
    after_script:
        - docker image push $IMAGE_NAME_FINAL # push with versioning
        - docker image tag $IMAGE_NAME_FINAL $IMAGE_NAME_BASE/$PROJECT_ID:production # retag same image and push with production tag
        - docker image push $IMAGE_NAME_BASE/$PROJECT_ID:production
        - docker images ls
    artifacts: # create artifact when job fails
        name: $IMAGE_NAME_FINAL
        when: on_failure
        paths:
            - ./
        expire_in: 2 days
        exclude:
            - .gitlab-ci.yml

#CI_DEPLOY_BACKEND:
#    stage: deploy
#    <<: *template
#    needs: []
##    when: manual # only execute when approved manually
#    script:
#        # setup ssh key to communicate with server
#        - eval $(ssh-agent -s)
#        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#        - mkdir -p ~/.ssh
#        - chmod 700 ~/.ssh
#        - echo 192.168.195.109 $SSH_DEPLOYMENT_HOST >> /etc/hosts
#        # login to the registry
#        - docker login -u pipeline -p $BUILD_TOKEN $CI_REGISTRY
#        # copy stack file to server
#        - ls -l
#        - scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no backend/backend-stack.yml $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST:/home/student/databases/backend-stack.yml
#        # deploy stack
#        - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -t $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST 'bash -s' < backend/deploy-backend.sh

CI_DEPLOY_BACKEND:
    stage: deploy
    <<: *template
    needs: []
#    when: manual # only execute when approved manually..
    before_script:
        - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - echo 192.168.195.168 manager-2.inf-hsleiden >> /etc/hosts
    script:
        - docker login -u pipeline -p $BUILD_TOKEN $CI_REGISTRY
        - cd backend
        - ls -l
        - cd ../
        - mkdir /home/student/databases
        - scp -o StrictHostKeyChecking=no docker-stack.yml student@manager-2.inf-hsleiden:/home/student/databases/docker-stack.yml
#        - ssh -o StrictHostKeyChecking=no -t student@manager-2.inf-hsleiden 'bash -s' < backend/deploy-backend.sh

