stages:
    - test
    - analyse
    - build
    - deploy
    - verify

.job_docker_template: &template
    retry: 1
    tags:
        - swarm
    only:
        refs:
            - main
            - feature/pipeline-stages
        changes:
            - backend/**/*

CI_TEST_BACKEND:
    stage: test
    variables:
        BASE_IMAGE: node18-alpine
        PROJECT_ID: backend
        TARGET_ID: test
        IMAGE_NAME_FINAL: $IMAGE_NAME_BASE/$PROJECT_ID:$TARGET_ID-1.0.$CI_PIPELINE_IID-$BASE_IMAGE
    inherit:
        default: false
    <<: *template
    #    when: manual # only execute when approved manually
    needs: [CI_PRE_CHECK] # no dependencies.
    before_script:
        - echo "Running CI_TEST_BACKEND"
        - docker login -u pipeline -p $BUILD_TOKEN $CI_REGISTRY
    script:
        - docker build -t $IMAGE_NAME_FINAL --target $TARGET_ID $PROJECT_ID/.
        - docker run --rm -t $IMAGE_NAME_FINAL
    after_script:
        - docker image push $IMAGE_NAME_FINAL # push with versioning
        - docker image tag $IMAGE_NAME_FINAL $IMAGE_NAME_BASE/$PROJECT_ID:$TARGET_ID # re-tag same image and push with target tag
        - docker image push $IMAGE_NAME_BASE/$PROJECT_ID:$TARGET_ID #push re-tag
        - docker images ls

CI_TEST_COV_BACKEND:
    stage: test
    variables:
        BASE_IMAGE: node18-alpine
        PROJECT_ID: backend
        TARGET_ID: test-cov
        IMAGE_NAME_FINAL: $IMAGE_NAME_BASE/$PROJECT_ID:$TARGET_ID-1.0.$CI_PIPELINE_IID-$BASE_IMAGE
    inherit:
        default: false
    <<: *template
    #    when: manual # only execute when approved manually
    needs: [CI_PRE_CHECK]
    before_script:
        - echo "Running COV_BACKEND"
        - docker login -u pipeline -p $BUILD_TOKEN $CI_REGISTRY
    script:
        - docker build -t $IMAGE_NAME_FINAL --target $TARGET_ID $PROJECT_ID/.
        - docker run --rm -t $IMAGE_NAME_FINAL
    after_script:
        - docker image push $IMAGE_NAME_FINAL # push with versioning
        - docker image tag $IMAGE_NAME_FINAL $IMAGE_NAME_BASE/$PROJECT_ID:$TARGET_ID # re-tag same image and push with target tag
        - docker image push $IMAGE_NAME_BASE/$PROJECT_ID:$TARGET_ID #push re-tag
        - docker images ls

CI_TEST_E2E_BACKEND:
    stage: test
    variables:
        BASE_IMAGE: node18-alpine
        PROJECT_ID: backend
        TARGET_ID: test-e2e
        IMAGE_NAME_FINAL: $IMAGE_NAME_BASE/$PROJECT_ID:$TARGET_ID-1.0.$CI_PIPELINE_IID-$BASE_IMAGE
    inherit:
        default: false
    <<: *template
    #    when: manual # only execute when approved manually
    needs: [CI_PRE_CHECK]
    before_script:
        - echo "Running E2E_BACKEND"
        - docker login -u pipeline -p $BUILD_TOKEN $CI_REGISTRY
    script:
        - docker build -t $IMAGE_NAME_FINAL --target $TARGET_ID $PROJECT_ID/.
        - docker run --rm -t $IMAGE_NAME_FINAL
    after_script:
        - docker image push $IMAGE_NAME_FINAL # push with versioning
        - docker image tag $IMAGE_NAME_FINAL $IMAGE_NAME_BASE/$PROJECT_ID:$TARGET_ID # re-tag same image and push with target tag
        - docker image push $IMAGE_NAME_BASE/$PROJECT_ID:$TARGET_ID #push re-tag
        - docker images ls

CI_LINT_BACKEND:
    stage: test
    variables:
        BASE_IMAGE: node18-alpine
        PROJECT_ID: backend
        TARGET_ID: lint
        IMAGE_NAME_FINAL: $IMAGE_NAME_BASE/$PROJECT_ID:$TARGET_ID-1.0.$CI_PIPELINE_IID-$BASE_IMAGE
    inherit:
        default: false
    <<: *template
    #    when: manual # only execute when approved manually
    needs: [CI_PRE_CHECK]
    before_script:
        - echo "Running LINT"
        - docker login -u pipeline -p $BUILD_TOKEN $CI_REGISTRY
    script:
        - docker build -t $IMAGE_NAME_FINAL --target $TARGET_ID $PROJECT_ID/.
        - docker run --rm -t $IMAGE_NAME_FINAL
    after_script:
        - docker image push $IMAGE_NAME_FINAL # push with versioning
        - docker image tag $IMAGE_NAME_FINAL $IMAGE_NAME_BASE/$PROJECT_ID:$TARGET_ID # re-tag same image and push with target tag
        - docker image push $IMAGE_NAME_BASE/$PROJECT_ID:$TARGET_ID #push re-tag
        - docker images ls

CI_SONAR_BACKEND:
    stage: analyse
    script:
        - echo "Running SONAR"

CI_BUILD_BACKEND:
    stage: build
    variables:
        BASE_IMAGE: node18-alpine
        PROJECT_ID: backend
        IMAGE_NAME_FINAL: $IMAGE_NAME_BASE/$PROJECT_ID:1.0.$CI_PIPELINE_IID-$BASE_IMAGE
    inherit:
        default: false
    <<: *template
#    when: manual # only execute when approved manually
    needs: [CI_TEST_BACKEND] # no dependencies.
    before_script:
        - echo "building for production"
        - docker login -u pipeline -p $BUILD_TOKEN $CI_REGISTRY
    script:
        - docker build -t $IMAGE_NAME_FINAL --target production $PROJECT_ID/.
    after_script:
        - docker image push $IMAGE_NAME_FINAL # push with versioning
        - docker image tag $IMAGE_NAME_FINAL $IMAGE_NAME_BASE/$PROJECT_ID:production # re-tag same image and push with production tag
        - docker image push $IMAGE_NAME_BASE/$PROJECT_ID:production
        - docker images ls
    artifacts: # create artifact when job fails
        name: $IMAGE_NAME_FINAL
        when: on_failure
        paths:
            - ./
        expire_in: 2 days
        exclude:
            - .gitlab-ci.yml

CI_DEPLOY_BACKEND: #$BUILD_TOKEN  $CI_REGISTRY  $SSH_DEPLOYMENT_IP   $SSH_DEPLOYMENT_HOST $SSH_DEPLOYMENT_USER $SSH_PRIVATE_KEY
    stage: deploy
    variables:
        STACK_FILE_NAME: backend-stack.yml
        DEPLOY_FILE_NAME: deploy-backend.sh
        PROJECT_ID: backend
    <<: *template
    when: manual # only execute when approved manually.
    needs: [CI_BUILD_BACKEND]
    before_script:
        - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - echo $SSH_DEPLOYMENT_IP $SSH_DEPLOYMENT_HOST >> /etc/hosts
        - echo $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST
        - docker login -u pipeline -p $BUILD_TOKEN $CI_REGISTRY
        # - ssh -o StrictHostKeyChecking=no -t $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST 'bash -s' < prepare.sh #create project dir
        - ssh -o StrictHostKeyChecking=no $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST bash -c 'ls -l'
        - ssh -o StrictHostKeyChecking=no $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST bash -c 'docker network ls'
    script:
        - scp -o StrictHostKeyChecking=no ./$PROJECT_ID/$STACK_FILE_NAME $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST:/home/student/databases/$STACK_FILE_NAME #copy over stack files
        - ssh -o StrictHostKeyChecking=no -t $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST 'bash -s' < ./$PROJECT_ID/$DEPLOY_FILE_NAME #execute file

CI_VERIFY_BACKEND:
    stage: verify
    variables:
        VERIFY_FILE_NAME: verify-backend.sh
        PROJECT_ID: backend
    <<: *template
    needs: [CI_DEPLOY_BACKEND]
    before_script:
        - echo "Verify"
        - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - echo $SSH_DEPLOYMENT_IP $SSH_DEPLOYMENT_HOST >> /etc/hosts
        - docker login -u pipeline -p $BUILD_TOKEN $CI_REGISTRY
    script:
        - ssh -o StrictHostKeyChecking=no -t $SSH_DEPLOYMENT_USER@$SSH_DEPLOYMENT_HOST 'bash -s' < ./$PROJECT_ID/$VERIFY_FILE_NAME #execute verify file
